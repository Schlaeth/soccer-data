name: Check & Version File

permissions:
  contents: write

on:
  schedule:
    - cron: "0 * * * *"   # stündlich
  workflow_dispatch:

jobs:
  fetch:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Download fixtures.csv
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p fixtures
          curl -fSL "https://www.football-data.co.uk/fixtures.csv" -o fixtures/fixtures.csv

      - name: Download Country Files into league folders
        shell: bash
        run: |
          set -euo pipefail
          season="2526"
          # D2 ist enthalten
          leagues=(E0 E1 E2 E3 D1 D2 F1 F2 I1 I2 P1 SP1 SP2 T1)

          for lg in "${leagues[@]}"; do
            mkdir -p "CountryFiles/${lg}"
            url="https://www.football-data.co.uk/mmz4281/${season}/${lg}.csv"
            curl -fSL "$url" -o "CountryFiles/${lg}/${lg}.csv"
          done

      - name: Show what was downloaded (debug)
        shell: bash
        run: |
          echo "=== fixtures ==="
          ls -l fixtures || true
          echo "=== CountryFiles (tree) ==="
          find CountryFiles -maxdepth 2 -type f -name '*.csv' -print | sort || true

      - name: Commit if changed (stage first, then decide)
        shell: bash
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # 1) Erst alles hinzufügen (auch neue Ordner/Dateien)
          git add -A fixtures CountryFiles

          # 2) Prüfen, ob STAGED Änderungen existieren
          if git diff --cached --quiet; then
            echo "No changes ✅"
            exit 0
          fi

          # 3) Datierte Kopien nur für die geänderten (staged) Dateien erzeugen
          DATE=$(date -u +'%Y-%m-%d')
          mapfile -t staged_changed < <(git diff --name-only --cached | grep -E '^(fixtures/fixtures\.csv|CountryFiles/.+/.+\.csv)$' || true)

          for f in "${staged_changed[@]}"; do
            if [[ "$f" == "fixtures/fixtures.csv" ]]; then
              cp "fixtures/fixtures.csv" "fixtures/${DATE}_fixtures.csv"
            else
              dir=$(dirname "$f")          # z. B. CountryFiles/E0
              base=$(basename "$f" .csv)   # z. B. E0
              cp "$f" "${dir}/${DATE}_${base}.csv"
            fi
          done

          # 4) Datierte Kopien auch hinzufügen
          git add -A fixtures CountryFiles

          # 5) Commit & Push
          git commit -m "Auto-update: ${DATE}"
          git push
