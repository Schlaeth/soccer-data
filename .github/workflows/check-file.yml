name: Check & Version File

permissions:
  contents: write

on:
  schedule:
    - cron: "0 * * * *"   # stündlich (UTC)
  workflow_dispatch:

jobs:
  fetch:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Download fixtures.csv (dated + latest alias)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p fixtures

          URL="https://www.football-data.co.uk/fixtures.csv"
          DATE="$(date -u +%Y-%m-%d)"
          OUT_DATED="fixtures/${DATE}_fixtures.csv"
          OUT_LATEST="fixtures/fixtures.csv"

          # Nur laden, wenn Server neuer ist (spart Commits)
          if [[ -f "$OUT_DATED" ]]; then
            curl -fSL -z "$OUT_DATED" "$URL" -o "$OUT_DATED" || echo "No update on server"
          else
            curl -fSL "$URL" -o "$OUT_DATED"
          fi

          # "Latest" aktualisieren (Symlink oder Kopie – Kopie ist GitHub-freundlicher)
          cp -f "$OUT_DATED" "$OUT_LATEST"

      - name: Determine current season (scrape website)
        id: season
        shell: bash
        run: |
          set -euo pipefail
          PAGE_URL="https://www.football-data.co.uk/germanym.php"

          # "Season YYYY/YYYY" parsen (z. B. "Season 2025/2026")
          season_text="$(curl -fsSL "$PAGE_URL" | grep -Pom1 'Season\s+[0-9]{4}/[0-9]{4}' || true)"
          if [[ -n "$season_text" ]]; then
            start_year="$(grep -oE '[0-9]{4}' <<< "$season_text" | head -n1)"
          else
            # Fallback-Heuristik: Saisonstart ~ Juli
            y=$(date -u +%Y); m=$(date -u +%m)
            if ((10#$m >= 7)); then start_year="$y"; else start_year="$((y-1))"; fi
          fi
          echo "start_year=$start_year" >> "$GITHUB_OUTPUT"
          
      - name: Download current season files into league folders (direct .csv + dated)
        shell: bash
        run: |
          set -euo pipefail

          leagues=(E0 E1 E2 E3 D1 D2 F1 F2 I1 I2 P1 SP1 SP2 T1)

          y=${{ steps.season.outputs.start_year }}
          y2=$((y+1))
          code=$(printf "%02d%02d" $((y % 100)) $((y2 % 100)))  # z. B. 2025/2026 -> 2526
          base="https://www.football-data.co.uk/mmz4281"

          mkdir -p CountryFiles
          TODAY="$(date -u +%Y-%m-%d)"

          for lg in "${leagues[@]}"; do
            mkdir -p "CountryFiles/${lg}"
            url="${base}/${code}/${lg}.csv"
            out="CountryFiles/${lg}/${lg}+${y}+${y2}.csv"

            echo "Checking ${url} ..."

            # Lade Datei nur, wenn sich Inhalt auf dem Server geändert hat
            status_code=$(curl -fsSLo "${out}" \
              -w "%{http_code}" \
              -z "${out}" \
              --retry 3 --retry-delay 2 \
              --remote-time \
              "${url}" || echo "000")

            if [[ "${status_code}" == "200" ]]; then
              dated="CountryFiles/${lg}/${TODAY}_${lg}.csv"
              cp -f "${out}" "${dated}"
              echo "✅ Updated ${out} and snapshot ${dated}"
            elif [[ "${status_code}" == "304" ]]; then
              echo "⏩ Not modified: ${url}"
            else
              echo "⚠️ Skip/Not found: ${url} (status ${status_code})"
            fi
          done

      - name: Show what was downloaded (debug)
        shell: bash
        run: |
          echo "=== fixtures ==="
          ls -l fixtures || true
          echo "=== CountryFiles (current season) ==="
          find CountryFiles -maxdepth 2 -type f -name '*.csv' -print | sort || true

      - name: Commit if changed
        shell: bash
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add -A fixtures CountryFiles
          if git diff --cached --quiet; then
            echo "No changes ✅"
            exit 0
          fi

          DATE=$(date -u +'%Y-%m-%d')
          git commit -m "Auto-update: ${DATE}"
          git push
